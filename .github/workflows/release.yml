name: Release
on:
  push:
    branches: [main]
    paths:
      - "package.json"
  workflow_dispatch:
    inputs:
      test_build:
        description: "Create test build (will not publish to releases)"
        required: false
        default: false
        type: boolean
  pull_request:
    branches: [main]
    paths:
      - "package.json"

jobs:
  build-linux-x64:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    env:
      NODE_GYP_FORCE_PYTHON: "python3"
      npm_config_node_gyp: "/usr/local/lib/node_modules/node-gyp/bin/node-gyp.js"
      npm_config_target: "32.3.3"
      npm_config_runtime: "electron"
      npm_config_arch: "x64"
      npm_config_target_arch: "x64"
      npm_config_disturl: "https://electronjs.org/headers"
      npm_config_python: "python3"
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsecret-1-dev gcc g++ make libarchive-tools rpm fakeroot

      - name: Install dependencies
        run: |
          sudo npm install -g node-gyp@9.4.0
          npm install
          sudo npm install -g electron@32.3.3 electron-builder
          npm rebuild sqlite3 --build-from-source

      - name: Set 7zip permissions
        run: |
          sudo chmod +x /usr/local/lib/node_modules/electron-builder/node_modules/7zip-bin/linux/x64/7za

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build Linux (x64)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
        run: |
          CI=false npm run build
          electron-builder --linux --x64 -c.linux.target=AppImage -c.linux.target=deb -c.linux.target=rpm -c.linux.target=pacman

      - name: Upload x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.pacman
            dist/*.yml

  build-linux-arm64:
    runs-on: ubuntu-24.04-arm
    env:
      NODE_GYP_FORCE_PYTHON: "python3"
      npm_config_node_gyp: "/usr/local/lib/node_modules/node-gyp/bin/node-gyp.js"
      npm_config_target: "32.3.3"
      npm_config_runtime: "electron"
      npm_config_arch: "arm64"
      npm_config_target_arch: "arm64"
      npm_config_disturl: "https://electronjs.org/headers"
      npm_config_python: "python3"
      npm_config_target_platform: "linux"
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsecret-1-dev gcc g++ make libarchive-tools

      - name: Install dependencies
        run: |
          sudo npm install -g node-gyp@9.4.0
          npm install
          sudo npm install -g electron@32.3.3 electron-builder
          npm rebuild sqlite3 --build-from-source

      - name: Set 7zip permissions
        run: |
          sudo chmod +x /usr/local/lib/node_modules/electron-builder/node_modules/7zip-bin/linux/arm64/7za

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build React app
        run: CI=false npm run build

      - name: Create ARM64 config
        run: |
          cat > electron-builder-arm64.json << 'EOF'
          {
            "appId": "com.bbzcloud.app",
            "productName": "BBZ Cloud",
            "artifactName": "BBZ-Cloud-${version}-${arch}.${ext}",
            "files": [
              "build/**/*",
              "node_modules/**/*",
              "package.json",
              "public/electron.js",
              "public/preload.js",
              "public/webview-preload.js",
              "public/services/**/*"
            ],
            "extraResources": [
              {
                "from": "assets",
                "to": "assets",
                "filter": ["**/*"]
              }
            ],
            "directories": {
              "buildResources": "assets"
            },
            "linux": {
              "target": ["AppImage"],
              "icon": "assets/images/icon.png",
              "category": "Education",
              "desktop": {
                "entry": {
                  "Name": "BBZ Cloud",
                  "Comment": "Die Desktop-App fÃ¼r die BBZ Cloud",
                  "Categories": "Education;Network;",
                  "StartupWMClass": "BBZ Cloud"
                }
              }
            },
            "publish": {
              "provider": "github",
              "owner": "dclausen01",
              "repo": "bbzcloud-2"
            }
          }
          EOF

      - name: Build Linux ARM64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
        run: |
          electron-builder --linux --arm64 --config electron-builder-arm64.json

      - name: Verify ARM64 binaries
        run: |
          echo "Checking built ARM64 binaries:"
          ls -la dist/
          for file in dist/*.AppImage; do
            if [ -f "$file" ]; then
              echo "File: $file"
              file "$file" || true
            fi
          done

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: |
            dist/*.AppImage
            dist/*.yml

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux-x64, build-linux-arm64, build-mac, build-windows]
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Download Linux x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-x64-artifacts
          path: dist-linux-x64/

      - name: Download Linux ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: dist-linux-arm64/

      - name: Download Mac artifacts
        uses: actions/download-artifact@v4
        with:
          name: mac-artifacts
          path: dist-mac/

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: dist-windows/

      - name: Combine all artifacts
        run: |
          mkdir -p dist
          cp -r dist-linux-x64/* dist/ 2>/dev/null || true
          cp -r dist-linux-arm64/* dist/ 2>/dev/null || true
          cp -r dist-mac/* dist/ 2>/dev/null || true
          cp -r dist-windows/* dist/ 2>/dev/null || true
          echo "Combined artifacts:"
          ls -la dist/

      - name: Get previous version
        id: get_previous_version
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
          echo "previous_version=${PREV_TAG#v}" >> $GITHUB_OUTPUT

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          name: ${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          body: |
            **Full Changelog**: https://github.com/dclausen01/bbzcloud-2/compare/v${{ steps.get_previous_version.outputs.previous_version }}...v${{ steps.get_version.outputs.version }}
          files: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.pacman
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.msi
            dist/*.yml

      - name: Upload Test Build Artifacts
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: test-build-all-platforms-${{ steps.get_version.outputs.version }}
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.pacman
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.msi
            dist/*.yml
          retention-days: 7

  build-mac:
    runs-on: macos-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install
          sudo npm install -g electron@32.3.3 electron-builder
          npm rebuild sqlite3 --build-from-source

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build Mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: |
          npm run build
          electron-builder --mac --x64 --aarch64 --config.mac.identity=null --config.mac.hardenedRuntime=true --config.mac.gatekeeperAssess=false

      - name: Upload Mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-artifacts
          path: |
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.yml

  build-windows:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        env:
          npm_config_build_from_source: false
        run: |
          npm install
          npm install -g electron@32.3.3 electron-builder

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build Windows
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
        run: |
          npm run build
          electron-builder --win --x64

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.msi
            dist/*.yml
