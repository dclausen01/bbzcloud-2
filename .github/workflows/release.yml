name: Release
on:
  push:
    branches: [main]
    paths:
      - "package.json"
  workflow_dispatch:
    inputs:
      test_build:
        description: "Create test build (will not publish to releases)"
        required: false
        default: false
        type: boolean
  pull_request:
    branches: [main]
    paths:
      - "package.json"

jobs:
  build-linux-x64:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    env:
      NODE_GYP_FORCE_PYTHON: "python3"
      npm_config_node_gyp: "/usr/local/lib/node_modules/node-gyp/bin/node-gyp.js"
      npm_config_target: "32.3.3"
      npm_config_runtime: "electron"
      npm_config_arch: "x64"
      npm_config_target_arch: "x64"
      npm_config_disturl: "https://electronjs.org/headers"
      npm_config_python: "python3"
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsecret-1-dev gcc g++ make libarchive-tools rpm fakeroot

      - name: Install dependencies
        run: |
          sudo npm install -g node-gyp@9.4.0
          npm install
          sudo npm install -g electron@32.3.3 electron-builder
          npm rebuild sqlite3 --build-from-source

      - name: Set 7zip permissions
        run: |
          sudo chmod +x /usr/local/lib/node_modules/electron-builder/node_modules/7zip-bin/linux/x64/7za

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build Linux (x64)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
        run: |
          npm run build
          electron-builder --linux --x64 -c.linux.target=AppImage -c.linux.target=deb -c.linux.target=rpm -c.linux.target=pacman

      - name: Upload x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.pacman
            dist/*.yml

  build-linux-arm64:
    runs-on: ubuntu-latest
    needs: build-linux-x64
    env:
      NODE_GYP_FORCE_PYTHON: "python3"
      npm_config_node_gyp: "/usr/local/lib/node_modules/node-gyp/bin/node-gyp.js"
      npm_config_target: "32.3.3"
      npm_config_runtime: "electron"
      npm_config_arch: "arm64"
      npm_config_target_arch: "arm64"
      npm_config_disturl: "https://electronjs.org/headers"
      npm_config_python: "python3"
      npm_config_target_platform: "linux"
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install system dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y libsecret-1-dev gcc g++ make libarchive-tools rpm fakeroot
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Install ARM64 cross-compilation libraries for keytar
          sudo apt-get install -y libsecret-1-dev:arm64 libglib2.0-dev:arm64 libgio-2.0-dev:arm64 || true

          # Alternative: Install multiarch support and ARM64 libraries
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libsecret-1-dev:arm64 libglib2.0-dev:arm64 || true

      - name: Install dependencies for ARM64
        env:
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          AR: aarch64-linux-gnu-ar
          STRIP: aarch64-linux-gnu-strip
          npm_config_target_arch: "arm64"
          npm_config_target_platform: "linux"
          npm_config_arch: "arm64"
          npm_config_cache: "/tmp/.npm"
          npm_config_build_from_source: "true"
        run: |
          sudo npm install -g node-gyp@9.4.0
          npm install --ignore-scripts
          sudo npm install -g electron@32.3.3 electron-builder

      - name: Rebuild native modules for ARM64
        env:
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          AR: aarch64-linux-gnu-ar
          STRIP: aarch64-linux-gnu-strip
          LINK: aarch64-linux-gnu-gcc
          npm_config_target_arch: "arm64"
          npm_config_target_platform: "linux"
          npm_config_arch: "arm64"
          npm_config_disturl: "https://electronjs.org/headers"
          npm_config_runtime: "electron"
          npm_config_target: "32.3.3"
          npm_config_build_from_source: "true"
          npm_config_force: "true"
          CFLAGS: "-march=armv8-a"
          CXXFLAGS: "-march=armv8-a"
          LDFLAGS: ""
        run: |
          # Rebuild sqlite3 with proper ARM64 configuration
          npm rebuild sqlite3 --build-from-source --target_arch=arm64 --target_platform=linux --dist-url=https://electronjs.org/headers --runtime=electron --target=32.3.3

          # Rebuild keytar with proper ARM64 configuration
          npm rebuild keytar --build-from-source --target_arch=arm64 --target_platform=linux --dist-url=https://electronjs.org/headers --runtime=electron --target=32.3.3

      - name: Build React app
        run: npm run build

      - name: Build Linux ARM64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
          npm_config_target_arch: "arm64"
          npm_config_target_platform: "linux"
          npm_config_arch: "arm64"
        run: |
          electron-builder --linux --arm64 -c.linux.target=AppImage -c.linux.target=deb -c.linux.target=rpm -c.linux.target=pacman

      - name: Verify ARM64 binaries
        run: |
          echo "Checking built ARM64 binaries:"
          ls -la dist/
          for file in dist/*.AppImage dist/*.deb dist/*.rpm dist/*.pacman; do
            if [ -f "$file" ]; then
              echo "File: $file"
              file "$file" || true
            fi
          done

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.pacman
            dist/*.yml

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux-x64, build-linux-arm64]
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Download x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-x64-artifacts
          path: dist-x64/

      - name: Download ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: dist-arm64/

      - name: Combine artifacts
        run: |
          mkdir -p dist
          cp -r dist-x64/* dist/ 2>/dev/null || true
          cp -r dist-arm64/* dist/ 2>/dev/null || true
          ls -la dist/

      - name: Get previous version
        id: get_previous_version
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
          echo "previous_version=${PREV_TAG#v}" >> $GITHUB_OUTPUT

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          name: ${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          body: |
            **Full Changelog**: https://github.com/dclausen01/bbzcloud-2/compare/v${{ steps.get_previous_version.outputs.previous_version }}...v${{ steps.get_version.outputs.version }}
          files: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.pacman
            dist/*.yml

      - name: Upload Test Build Artifacts
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: test-build-linux-${{ steps.get_version.outputs.version }}
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.pacman
            dist/*.yml
          retention-days: 7

  build-mac:
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install
          sudo npm install -g electron@32.3.3 electron-builder
          npm rebuild sqlite3 --build-from-source

      - name: Build Mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
        run: |
          npm run build
          electron-builder --mac --x64 --arm64

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.yml

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        env:
          npm_config_build_from_source: false
        run: |
          npm install
          npm install -g electron@32.3.3 electron-builder

      - name: Build Windows
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
        run: |
          npm run build
          electron-builder --win --x64

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.msi
            dist/*.yml
